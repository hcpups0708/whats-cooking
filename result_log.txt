mean: 0.78237, std: 0.00261, params: {'weights': [4, 3, 1, 2], 'rf__n_estimators': 300, 'lr__C': 1}
mean: 0.78358, std: 0.00298, params: {'weights': [5, 3, 2, 3], 'rf__n_estimators': 300, 'lr__C': 1}
mean: 0.78242, std: 0.00214, params: {'weights': [4, 3, 1, 2], 'rf__n_estimators': 1000, 'lr__C': 1}
mean: 0.78378, std: 0.00294, params: {'weights': [5, 3, 2, 3], 'rf__n_estimators': 1000, 'lr__C': 1}
mean: 0.79001, std: 0.00081, params: {'weights': [4, 3, 1, 2], 'rf__n_estimators': 300, 'lr__C': 100}
mean: 0.79230, std: 0.00131, params: {'weights': [5, 3, 2, 3], 'rf__n_estimators': 300, 'lr__C': 100}
mean: 0.78999, std: 0.00091, params: {'weights': [4, 3, 1, 2], 'rf__n_estimators': 1000, 'lr__C': 100}
mean: 0.79258, std: 0.00102, params: {'weights': [5, 3, 2, 3], 'rf__n_estimators': 1000, 'lr__C': 100}
100>1 300=1000 upload=0.79767
mean: 0.79456, std: 0.00107, params: {'weights': [4, 3, 1, 3], 'rf__n_estimators': 300, 'lr__C': 10}
mean: 0.79301, std: 0.00087, params: {'weights': [5, 4, 1, 3], 'rf__n_estimators': 300, 'lr__C': 10}
mean: 0.79399, std: 0.00106, params: {'weights': [4, 3, 1, 3], 'rf__n_estimators': 1000, 'lr__C': 10}
mean: 0.79260, std: 0.00127, params: {'weights': [5, 4, 1, 3], 'rf__n_estimators': 1000, 'lr__C': 10}
mean: 0.79160, std: 0.00085, params: {'weights': [4, 3, 1, 3], 'rf__n_estimators': 300, 'lr__C': 100}
mean: 0.78971, std: 0.00084, params: {'weights': [5, 4, 1, 3], 'rf__n_estimators': 300, 'lr__C': 100}
mean: 0.79177, std: 0.00114, params: {'weights': [4, 3, 1, 3], 'rf__n_estimators': 1000, 'lr__C': 100}
mean: 0.78991, std: 0.00083, params: {'weights': [5, 4, 1, 3], 'rf__n_estimators': 1000, 'lr__C': 100}
10>100 300=1000 upload=0.80068
mean: 0.78589, std: 0.00058, params: {'weights': [1, 1, 2, 1], 'rf__n_estimators': 300, 'lr__C': 5}
mean: 0.79243, std: 0.00109, params: {'weights': [1, 1, 1, 2], 'rf__n_estimators': 300, 'lr__C': 5}
mean: 0.78587, std: 0.00055, params: {'weights': [1, 1, 2, 1], 'rf__n_estimators': 1000, 'lr__C': 5}
mean: 0.79265, std: 0.00096, params: {'weights': [1, 1, 1, 2], 'rf__n_estimators': 1000, 'lr__C': 5}
mean: 0.78730, std: 0.00092, params: {'weights': [1, 1, 2, 1], 'rf__n_estimators': 300, 'lr__C': 10}
mean: 0.79426, std: 0.00035, params: {'weights': [1, 1, 1, 2], 'rf__n_estimators': 300, 'lr__C': 10}
mean: 0.78720, std: 0.00097, params: {'weights': [1, 1, 2, 1], 'rf__n_estimators': 1000, 'lr__C': 10}
mean: 0.79459, std: 0.00103, params: {'weights': [1, 1, 1, 2], 'rf__n_estimators': 1000, 'lr__C': 10}
4>3 10>5 1000>300 upload=0.80159
mean: 0.79446, std: 0.00121, params: {'weights': [2, 1, 1, 1], 'rf__n_estimators': 300, 'lr__C': 5}
mean: 0.79145, std: 0.00157, params: {'weights': [1, 2, 1, 1], 'rf__n_estimators': 300, 'lr__C': 5}
mean: 0.79499, std: 0.00092, params: {'weights': [2, 1, 1, 1], 'rf__n_estimators': 1000, 'lr__C': 5}
mean: 0.79162, std: 0.00147, params: {'weights': [1, 2, 1, 1], 'rf__n_estimators': 1000, 'lr__C': 5}
mean: 0.79615, std: 0.00106, params: {'weights': [2, 1, 1, 1], 'rf__n_estimators': 300, 'lr__C': 10}
mean: 0.79321, std: 0.00187, params: {'weights': [1, 2, 1, 1], 'rf__n_estimators': 300, 'lr__C': 10}
mean: 0.79600, std: 0.00137, params: {'weights': [2, 1, 1, 1], 'rf__n_estimators': 1000, 'lr__C': 10}
mean: 0.79275, std: 0.00190, params: {'weights': [1, 2, 1, 1], 'rf__n_estimators': 1000, 'lr__C': 10}
1>2 10>5 300=1000 upload=0.80179
1>3 4>2 1>4 2>3
1>4>2>3 
mean: 0.79409, std: 0.00120, params: {'weights': [7, 3, 1, 5], 'rf__n_estimators': 300, 'lr__C': 10}
mean: 0.79610, std: 0.00078, params: {'weights': [5, 3, 2, 4], 'rf__n_estimators': 300, 'lr__C': 10}
mean: 0.79441, std: 0.00129, params: {'weights': [7, 3, 1, 5], 'rf__n_estimators': 500, 'lr__C': 10}
mean: 0.79632, std: 0.00071, params: {'weights': [5, 3, 2, 4], 'rf__n_estimators': 500, 'lr__C': 10}
mean: 0.79195, std: 0.00083, params: {'weights': [7, 3, 1, 5], 'rf__n_estimators': 300, 'lr__C': 50}
mean: 0.79497, std: 0.00095, params: {'weights': [5, 3, 2, 4], 'rf__n_estimators': 300, 'lr__C': 50}
mean: 0.79182, std: 0.00117, params: {'weights': [7, 3, 1, 5], 'rf__n_estimators': 500, 'lr__C': 50}
mean: 0.79487, std: 0.00113, params: {'weights': [5, 3, 2, 4], 'rf__n_estimators': 500, 'lr__C': 50}
[5, 3, 2, 4]>[7, 3, 1, 5] 10>50 300=500 upload=0.80139
mean: 0.79557, std: 0.00089, params: {'weights': [4, 2, 1, 3], 'rf__n_estimators': 300, 'lr__C': 10}
mean: 0.79426, std: 0.00116, params: {'weights': [8, 2, 1, 4], 'rf__n_estimators': 300, 'lr__C': 10}
mean: 0.79544, std: 0.00079, params: {'weights': [4, 2, 1, 3], 'rf__n_estimators': 500, 'lr__C': 10}
mean: 0.79421, std: 0.00144, params: {'weights': [8, 2, 1, 4], 'rf__n_estimators': 500, 'lr__C': 10}
mean: 0.79391, std: 0.00103, params: {'weights': [4, 2, 1, 3], 'rf__n_estimators': 300, 'lr__C': 50}
mean: 0.78949, std: 0.00104, params: {'weights': [8, 2, 1, 4], 'rf__n_estimators': 300, 'lr__C': 50}
mean: 0.79363, std: 0.00111, params: {'weights': [4, 2, 1, 3], 'rf__n_estimators': 500, 'lr__C': 50}
mean: 0.78946, std: 0.00141, params: {'weights': [8, 2, 1, 4], 'rf__n_estimators': 500, 'lr__C': 50}
[4, 2, 1, 3]>[8, 2, 1, 4] 10>50 300>500 upload=0.80109
mean: 0.79768, std: 0.00055, params: {'rf__n_estimators': 300, 'weights': [5, 2, 1, 3], 'knn__n_neighbors': 1, 'lr__C': 10}
mean: 0.79698, std: 0.00079, params: {'rf__n_estimators': 300, 'weights': [5, 2, 1, 3], 'knn__n_neighbors': 2, 'lr__C': 10}
mean: 0.79527, std: 0.00104, params: {'rf__n_estimators': 300, 'weights': [5, 2, 1, 3], 'knn__n_neighbors': 5, 'lr__C': 10}
mean: 0.79268, std: 0.00087, params: {'rf__n_estimators': 300, 'weights': [5, 2, 1, 3], 'knn__n_neighbors': 10, 'lr__C': 10}
1>2>5>10 upload=0.80451
mean: 0.79434, std: 0.00129, params: {'weights': [5, 2, 1, 3], 'rf__oob_score':0, 'rf__n_estimators': 300, 'lr__C': 10}
mean: 0.79539, std: 0.00073, params: {'weights': [4, 2, 1, 4], 'rf__oob_score':0, 'rf__n_estimators': 300, 'lr__C': 10}
mean: 0.79524, std: 0.00135, params: {'weights': [5, 2, 1, 3], 'rf__oob_score':1, 'rf__n_estimators': 300, 'lr__C': 10}
mean: 0.79572, std: 0.00079, params: {'weights': [4, 2, 1, 4], 'rf__oob_score':1, 'rf__n_estimators': 300, 'lr__C': 10}
1>0 upload=0.80048
mean: 0.79738, std: 0.00050, params: {'rf__n_estimators': 300, 'lr__class_weight': None, 'weights': [5, 2, 1, 3], 'knn__n_neighbors': 1, 'lr__C': 10}
mean: 0.79534, std: 0.00045, params: {'rf__n_estimators': 300, 'lr__class_weight': None, 'weights': [2, 1, 1, 2], 'knn__n_neighbors': 1, 'lr__C': 10}
mean: 0.80032, std: 0.00236, params: {'rf__n_estimators': 300, 'lr__class_weight': 'balanced', 'weights': [5, 2, 1, 3], 'knn__n_neighbors': 1, 'lr__C': 10}
mean: 0.79572, std: 0.00109, params: {'rf__n_estimators': 300, 'lr__class_weight': 'balanced', 'weights': [2, 1, 1, 2], 'knn__n_neighbors': 1, 'lr__C': 10}
'balanced'>None [5, 2, 1, 3]>[2, 1, 1, 2] 1.csv upload=0.80491
mean: 0.79522, std: 0.00098, params: {'rf__n_estimators': 300, 'knn__weights': 'uniform', 'rf__class_weight': None, 'lr__C': 10, 'weights': [5, 2, 1, 3]}
mean: 0.79499, std: 0.00118, params: {'rf__n_estimators': 300, 'knn__weights': 'uniform', 'rf__class_weight': 'balanced', 'lr__C': 10, 'weights': [5, 2, 1, 3]}
mean: 0.79615, std: 0.00131, params: {'rf__n_estimators': 300, 'knn__weights': 'distance', 'rf__class_weight': None, 'lr__C': 10, 'weights': [5, 2, 1, 3]}
mean: 0.79527, std: 0.00141, params: {'rf__n_estimators': 300, 'knn__weights': 'distance', 'rf__class_weight': 'balanced', 'lr__C': 10, 'weights': [5, 2, 1, 3]}
'distance'>'uniform' None>'balanced' 2.csv upload=0.80159
mean: 0.79788, std: 0.00267, params: {'weights': [5, 2, 1, 3], 'rf__n_estimators': 300, 'lr__C': 10}
mean: 0.78609, std: 0.00135, params: {'weights': [2, 1, 1, 1], 'rf__n_estimators': 300, 'lr__C': 10}
[5, 2, 1, 3]>[2, 1, 1, 1] 3.csv upload=0.80209
mean: 0.79728, std: 0.00291, params: {'weights': [5, 2, 1, 3], 'rf__n_estimators': 300, 'lr__C': 10}
mean: 0.79343, std: 0.00224, params: {'weights': [5, 2, 2, 3], 'rf__n_estimators': 300, 'lr__C': 10}
mean: 0.78989, std: 0.00168, params: {'weights': [4, 2, 2, 3], 'rf__n_estimators': 300, 'lr__C': 10}
[5, 2, 1, 3]>[5, 2, 2, 3]>[4, 2, 2, 3] 4.csv upload=0.80159
mean: 0.79728, std: 0.00298, params: {'ovr__estimator': LogisticRegression(class_weight='balanced'), 'weights': [5, 2, 1, 3], 'rf__n_estimators': 300, 'lr__C': 10}
mean: 0.79994, std: 0.00268, params: {'ovr__estimator': LogisticRegression(class_weight=None), 'weights': [5, 2, 1, 3], 'rf__n_estimators': 300, 'lr__C': 10}
None>'balanced' 5.csv upload=0.80581
mean: 0.78974, std: 0.00183, params: {'rf__n_estimators': 300, 'lr__solver': 'newton-cg', 'weights': [5, 2, 1, 3], 'lr__multi_class': 'ovr', 'lr__C': 1}
mean: 0.78933, std: 0.00082, params: {'rf__n_estimators': 300, 'lr__solver': 'lbfgs', 'weights': [5, 2, 1, 3], 'lr__multi_class': 'ovr', 'lr__C': 1}
mean: 0.79308, std: 0.00246, params: {'rf__n_estimators': 300, 'lr__solver': 'newton-cg', 'weights': [5, 2, 1, 3], 'lr__multi_class': 'multinomial', 'lr__C': 1}
mean: 0.79351, std: 0.00196, params: {'rf__n_estimators': 300, 'lr__solver': 'lbfgs', 'weights': [5, 2, 1, 3], 'lr__multi_class': 'multinomial', 'lr__C': 1}
mean: 0.79542, std: 0.00104, params: {'rf__n_estimators': 300, 'lr__solver': 'newton-cg', 'weights': [5, 2, 1, 3], 'lr__multi_class': 'ovr', 'lr__C': 10}
mean: 0.79522, std: 0.00082, params: {'rf__n_estimators': 300, 'lr__solver': 'lbfgs', 'weights': [5, 2, 1, 3], 'lr__multi_class': 'ovr', 'lr__C': 10}
mean: 0.78561, std: 0.00182, params: {'rf__n_estimators': 300, 'lr__solver': 'newton-cg', 'weights': [5, 2, 1, 3], 'lr__multi_class': 'multinomial', 'lr__C': 10}
mean: 0.78546, std: 0.00238, params: {'rf__n_estimators': 300, 'lr__solver': 'lbfgs', 'weights': [5, 2, 1, 3], 'lr__multi_class': 'multinomial', 'lr__C': 10}
newton-cg>lbfgs C=1->multinomial>ovr,C=10->ovr>multinomial 10>1 6.csv upload=0.80068
mean: 0.42065, std: 0.01021, params: {'n_estimators': 50, 'learning_rate': 0.1}
mean: 0.46876, std: 0.00618, params: {'n_estimators': 100, 'learning_rate': 0.1}
mean: 0.50057, std: 0.00612, params: {'n_estimators': 200, 'learning_rate': 0.1}
mean: 0.50664, std: 0.02907, params: {'n_estimators': 50, 'learning_rate': 1}
mean: 0.46259, std: 0.03629, params: {'n_estimators': 100, 'learning_rate': 1}
mean: 0.45039, std: 0.03559, params: {'n_estimators': 200, 'learning_rate': 1}
so bad QAQ
mean: 0.34422, std: 0.02264, params: {'max_features': 0.1, 'n_estimators': 3}
mean: 0.43517, std: 0.02067, params: {'max_features': 0.1, 'n_estimators': 5}
mean: 0.51281, std: 0.00221, params: {'max_features': 0.1, 'n_estimators': 10}
mean: 0.57878, std: 0.00318, params: {'max_features': 0.5, 'n_estimators': 3}
mean: 0.63212, std: 0.00682, params: {'max_features': 0.5, 'n_estimators': 5}
mean: 0.68052, std: 0.00203, params: {'max_features': 0.5, 'n_estimators': 10}
bagging 0.5>0.1 10>5>3
mean: 0.71126, std: 0.00416, params: {'max_features': 0.8, 'n_estimators': 30}
mean: 0.71277, std: 0.00147, params: {'max_features': 0.8, 'n_estimators': 50}
mean: 0.71700, std: 0.00526, params: {'max_features': 0.8, 'n_estimators': 100}
mean: 0.68810, std: 0.00567, params: {'max_features': 1.0, 'n_estimators': 30}
mean: 0.69299, std: 0.00619, params: {'max_features': 1.0, 'n_estimators': 50}
mean: 0.69578, std: 0.00551, params: {'max_features': 1.0, 'n_estimators': 100}
bagginng 0.8>1.0 100>50>30
mean: 0.72407, std: 0.00604, params: {'max_features': 0.6, 'n_estimators': 50}
mean: 0.72179, std: 0.00773, params: {'max_features': 0.7, 'n_estimators': 50}
mean: 0.71328, std: 0.00439, params: {'max_features': 0.8, 'n_estimators': 50}
mean: 0.70553, std: 0.00492, params: {'max_features': 0.9, 'n_estimators': 50}
bagging 0.6>0.7>0.8>0.9
mean: 0.73077, std: 0.00521, params: {'max_features': 'auto', 'n_estimators': 300, 'criterion': 'gini'}
mean: 0.73527, std: 0.00413, params: {'max_features': 'log2', 'n_estimators': 300, 'criterion': 'gini'}
mean: 0.70721, std: 0.00637, params: {'max_features': 'auto', 'n_estimators': 300, 'criterion': 'entropy'}
mean: 0.72169, std: 0.00558, params: {'max_features': 'log2', 'n_estimators': 300, 'criterion': 'entropy'}
rf log2>auto gini>entropy
mean: 0.73446, std: 0.00363, params: {'max_features': 'log2', 'n_estimators': 300, 'class_weight': None}
mean: 0.73201, std: 0.00408, params: {'max_features': 'log2', 'n_estimators': 300, 'class_weight': 'balanced'}
mean: 0.73285, std: 0.00531, params: {'max_features': 'log2', 'n_estimators': 300, 'class_weight': 'balanced_subsample'}
rf None>balanced_subsample>balanced
mean: 0.73322, std: 0.00319, params: {'min_samples_split': 2, 'n_estimators': 300}
mean: 0.73483, std: 0.00425, params: {'min_samples_split': 2, 'n_estimators': 500}
mean: 0.73134, std: 0.00552, params: {'min_samples_split': 4, 'n_estimators': 300}
mean: 0.73212, std: 0.00386, params: {'min_samples_split': 4, 'n_estimators': 500}
mean: 0.72571, std: 0.00268, params: {'min_samples_split': 8, 'n_estimators': 300}
mean: 0.72668, std: 0.00466, params: {'min_samples_split': 8, 'n_estimators': 500}
rf 2>4>8 500>300
mean: 0.70479, std: 0.00628, params: {'max_features': 0.6, 'n_estimators': 300,'criterion': 'gini'}
mean: 0.70251, std: 0.00450, params: {'max_features': 0.7, 'n_estimators': 300,'criterion': 'gini'}
mean: 0.70087, std: 0.00630, params: {'max_features': 0.8, 'n_estimators': 300,'criterion': 'gini'}
mean: 0.69973, std: 0.00420, params: {'max_features': 0.9, 'n_estimators': 300,'criterion': 'gini'}
mean: 0.67234, std: 0.00410, params: {'max_features': 0.6, 'n_estimators': 300,'criterion': 'entropy'}
mean: 0.66748, std: 0.00333, params: {'max_features': 0.7, 'n_estimators': 300,'criterion': 'entropy'}
mean: 0.66614, std: 0.00439, params: {'max_features': 0.8, 'n_estimators': 300,'criterion': 'entropy'}
mean: 0.66326, std: 0.00347, params: {'max_features': 0.9, 'n_estimators': 300,'criterion': 'entropy'}
0.6>0.7>0.8>0.9 gini>entropy
mean: 0.79751, std: 0.00193, params: {'weights': [3, 5, 2, 1, 3]}
mean: 0.79793, std: 0.00119, params: {'weights': [1, 5, 2, 1, 3]}
[1, 5, 2, 1, 3]>[3, 5, 2, 1, 3] 7.csv upload=0.80320
mean: 0.79454, std: 0.00068, params: {'weights': [5, 2, 1, 3], 'rf__n_estimators': 300, 'rf__max_features': None}
mean: 0.79534, std: 0.00123, params: {'weights': [5, 2, 1, 3], 'rf__n_estimators': 500, 'rf__max_features': None}
mean: 0.79602, std: 0.00172, params: {'weights': [5, 2, 1, 3], 'rf__n_estimators': 300, 'rf__max_features': 'log2'}
mean: 0.79650, std: 0.00168, params: {'weights': [5, 2, 1, 3], 'rf__n_estimators': 500, 'rf__max_features': 'log2'}
500>300 log2>None
mean: 0.79587, std: 0.00143, params: {'weights': [4, 5, 2, 1, 3]}
mean: 0.79730, std: 0.00233, params: {'weights': [2, 5, 2, 1, 3]}
[2, 5, 2, 1, 3]>[4, 5, 2, 1, 3]
mean: 0.79801, std: 0.00070, params: {'weights': [3, 2, 5, 2, 1, 3]}
mean: 0.79831, std: 0.00049, params: {'weights': [4, 2, 5, 2, 1, 3]}
mean: 0.79954, std: 0.00150, params: {'weights': [3, 1, 5, 2, 1, 3]}
mean: 0.79889, std: 0.00029, params: {'weights': [4, 1, 5, 2, 1, 3]}
3,1>4,1>4,2>3,2
mean: 0.79909, std: 0.00156, params: {'weights': [3, 1, 5, 2, 1, 3]}
mean: 0.79839, std: 0.00157, params: {'weights': [2, 1, 5, 2, 1, 3]}
3,1>2,1 10.csv upload=0.80722

('etc',etc),('lr', lr),('ovr', ovr), ('knn', knn), ('rf', rf)
mean: 0.79836, std: 0.00136, params: {'weights': [3, 5, 2, 1, 3]}
mean: 0.79884, std: 0.00134, params: {'weights': [4, 5, 2, 1, 3]}
8.csv upload=0.80813
mean: 0.79758, std: 0.00105, params: {'weights': [1, 5, 2, 1, 3]}
mean: 0.79829, std: 0.00143, params: {'weights': [2, 5, 2, 1, 3]}
2>1 9.csv upload=0.80662
mean: 0.79894, std: 0.00118, params: {'weights': [5, 5, 2, 1, 3]}
mean: 0.79773, std: 0.00088, params: {'weights': [5, 4, 2, 1, 3]}
5,5>5,4 11.csv upload=0.80813
mean: 0.79957, std: 0.00137, params: {'weights': [5, 6, 2, 1, 3]}
mean: 0.79851, std: 0.00073, params: {'weights': [6, 5, 2, 1, 3]}
5,6>6,5 12.csv upload=0.80782
mean: 0.80495, std: 0.00150, params: {'weights': [4, 5, 2, 1, 4]}
mean: 0.80377, std: 0.00181, params: {'weights': [4, 5, 3, 1, 4]}
13.csv
mean: 0.80563, std: 0.00205, params: {'weights': [4, 5, 2, 1, 3]} max_df=0.67
14.csv upload=0.81084
mean: 0.80301, std: 0.00124, params: {'weights': [4, 5, 2, 1, 3]} max_df=0.33
15.csv
mean: 0.80527, std: 0.00176, params: {'weights': [4, 5, 2, 1, 3]} max_df=0.90
16.csv upload=0.81144
mean: 0.80525, std: 0.00196, params: {'weights': [4, 5, 2, 1, 3]}
17.csv etc=ExtraTreesClassifier(verbose=1,n_jobs=20,n_estimators=2000) upload=0.81104
mean: 0.80507, std: 0.00177, params: {'weights': [4, 5, 2, 1, 3], 'knn__n_neighbors': 1}
mean: 0.80181, std: 0.00168, params: {'weights': [4, 5, 2, 2, 3], 'knn__n_neighbors': 1}
mean: 0.79250, std: 0.00148, params: {'weights': [4, 5, 2, 3, 3], 'knn__n_neighbors': 1}
mean: 0.80274, std: 0.00173, params: {'weights': [4, 5, 2, 1, 3], 'knn__n_neighbors': 15}
mean: 0.80271, std: 0.00224, params: {'weights': [4, 5, 2, 2, 3], 'knn__n_neighbors': 15}
mean: 0.80231, std: 0.00255, params: {'weights': [4, 5, 2, 3, 3], 'knn__n_neighbors': 15}
1>15 best:[4, 5, 2, 1, 3]
mean: 0.80555, std: 0.00215, params: {'weights': [4, 5, 2, 1, 3]} tfidf.fit(tr+ts)
18.csv upload=0.81165
mean: 0.80281, std: 0.00183, params: {'weights': [2, 4, 5, 2, 1, 3]}
mean: 0.80045, std: 0.00147, params: {'weights': [3, 4, 5, 2, 1, 3]}
mean: 0.79894, std: 0.00169, params: {'weights': [4, 4, 5, 2, 1, 3]}
2>3>4
mean: 0.79861, std: 0.00252, params: {'weights': [1, 1, 1, 1, 1]}
mean: 0.80133, std: 0.00157, params: {'weights': [1, 2, 1, 1, 1]}
mean: 0.79994, std: 0.00176, params: {'weights': [1, 3, 1, 1, 1]}
mean: 0.79720, std: 0.00152, params: {'weights': [1, 4, 1, 1, 1]}
mean: 0.79451, std: 0.00177, params: {'weights': [1, 5, 1, 1, 1]}
2>3>1>4>5
mean: 0.80384, std: 0.00147, params: {'weights': [1, 4, 5, 2, 1, 3]}
mean: 0.80450, std: 0.00199, params: {'weights': [1, 5, 6, 2, 1, 3]}
mean: 0.80399, std: 0.00229, params: {'weights': [1, 5, 6, 3, 2, 4]}
56213>56324>45213 19.csv
mean: 0.80271, std: 0.00212, params: {'weights': [2, 2.5, 1, 1, 1]}
mean: 0.80372, std: 0.00208, params: {'weights': [3, 3, 1, 1, 1]}
mean: 0.80452, std: 0.00233, params: {'weights': [4, 3.5, 1, 1, 1]}
mean: 0.80500, std: 0.00189, params: {'weights': [5, 4, 1, 1, 1]}
mean: 0.80495, std: 0.00270, params: {'weights': [6, 4.5, 1, 1, 1]}
5>6>4>3>2 20.csv
mean: 0.80445, std: 0.00229, params: {'weights': [6, 4.5, 1, 1, 2]}
mean: 0.80364, std: 0.00133, params: {'weights': [7.1, 5, 1, 1, 3]}
mean: 0.80299, std: 0.00154, params: {'weights': [8.2, 5.5, 1, 1, 4]}
mean: 0.80271, std: 0.00150, params: {'weights': [9.3, 6, 1, 1, 5]}
mean: 0.80196, std: 0.00163, params: {'weights': [10.4, 6.5, 1, 1, 7]}

mean: 0.80450, std: 0.00207, params: {'weights': [5, 4, 1, 1, 2]}
mean: 0.80351, std: 0.00206, params: {'weights': [5, 4, 1, 1, 3]}
mean: 0.80309, std: 0.00196, params: {'weights': [5, 4, 1, 1, 4]}
mean: 0.80155, std: 0.00198, params: {'weights': [5, 4, 1, 1, 5]}
mean: 0.80037, std: 0.00166, params: {'weights': [5, 4, 1, 1, 6]}

mean: 0.80540, std: 0.00199, params: {'weights': [5, 4, 1, 1, 1]}
mean: 0.80329, std: 0.00206, params: {'weights': [5, 4, 2, 1, 1]}
mean: 0.80163, std: 0.00168, params: {'weights': [5, 4, 3, 1, 1]}
mean: 0.79989, std: 0.00182, params: {'weights': [5, 4, 4, 1, 1]}
mean: 0.79813, std: 0.00131, params: {'weights': [5, 4, 5, 1, 1]}
21.csv
mean: 0.65663, std: 0.00399, params: {'n_estimators': 750, 'learning_rate': 0.1}
mean: 0.65757, std: 0.00508, params: {'n_estimators': 750, 'learning_rate': 0.08}xgb